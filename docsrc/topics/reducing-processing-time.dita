<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<!--  This file is part of the DITA Open Toolkit project. See the accompanying LICENSE file for applicable license.  -->
<topic id="reducing-processing-time">
   <title>Speeding up builds</title>
   <shortdesc>Several configuration changes can significantly reduce DITA-OT processing time.</shortdesc>
   <prolog>
      <metadata>
         <keywords>
            <indexterm><xmlatt>xtrf</xmlatt></indexterm>
            <indexterm><xmlatt>xtrc</xmlatt></indexterm>
            <indexterm>processing time</indexterm>
            <indexterm>Java
               <indexterm>required version</indexterm></indexterm>
            <indexterm>debugging
               <indexterm>generate-debug-attributes</indexterm></indexterm>
            <indexterm>JVM</indexterm>
         </keywords>
      </metadata>
   </prolog>
   <body>
      <section>
         <title>Disable debug attribute generation</title>
         <p>The <parmname>generate-debug-attributes</parmname> parameter determines whether debugging attributes are
            generated in the temporary files. By changing the value to <codeph>false</codeph>, DITA-OT will no longer
            generate the <xmlatt>xtrf</xmlatt> and <xmlatt>xtrc</xmlatt> debug attributes. This will make it more
            difficult to track down the source file location from which a given issue may have originated, but it will
            reduce the size of the temporary files. As a result, XML parsing will take less time and overall processing
            time will be reduced.</p>
      </section>
      <section>
         <title>Use a fast disk for the temporary directory</title>
         <p>DITA-OT keeps topic and map files as separate files and processes each file multiple times during
            pre-processing. Thus reading from disk, parsing XML, serializing XML, and writing to disk makes processing
            quite I/O intensive. Use either an
            <xref href="http://en.wikipedia.org/wiki/Solid-state_drive" format="html" scope="external">SSD</xref> or a
            <xref href="http://en.wikipedia.org/wiki/RAM_drive" format="html" scope="external">RAM disk</xref> for
            temporary files, and never use a temporary directory that is not located on the same machine as where the
            processing takes place.</p>
      </section>
      <section>
         <title>Enable parallel processing</title>
         <p>As of DITA-OT 3.6, pre-processing module code can be run in parallel by setting the
               <parmname>parallel</parmname> parameter to <option>true</option>. The performance benefits this option
            provides depend heavily on the source file set, the DITA features used in the project, and the computer
            doing the processing, but under the right circumstances, you may see notable improvements when this option
            is enabled.</p>
      </section>
      <section>
         <title>Enable in-memory processing</title>
         <p>As of DITA-OT 3.6, the Cache Store can be activated by setting the <parmname>store-type</parmname> parameter
            to <option>memory</option>. <ph conkeyref="migrating-to-3.6/io-bound"/> For more information, see
            <xref keyref="store-api"/>.</p>
      </section>
      <section>
         <title>Reuse the JVM instance</title>
         <p>For all but large source sets, the Java virtual machine (JVM) will not have enough time to warm-up. By
            reusing the same JVM instance, the first few DITA-OT conversions will be “normal”, but when the Just-In-Time
            (JIT) compiler starts to kick in, the performance increase may be 2-10 fold. This is especially noticeable
            with smaller source sets, as much of the DITA-OT processing is I/O intensive.</p>
         <note type="tip">The
            <xref keyref="gradle-daemon"/> uses this mechanism (along with incremental builds) to reduce processing
            time. You can run DITA-OT with these features via the
            <xref keyref="dita-ot-gradle"/>.</note>
      </section>
      <section>
         <title>Use the latest Java version</title>
         <p>DITA-OT 2.0 to 2.3 require Java 7, and DITA-OT 2.4 and newer require Java 8. However, using a newer version
            of Java may further reduce processing time, depending on your operating system.</p>
      </section>
      <section>
         <title>Re-enable Java file caching</title>
         <p>As of Java 12, the file canonicalization cache is no longer enabled by default (see
            <xref keyref="JDK-8207005"/>). On Windows, this results in significantly longer build times, and slight
            increases on Linux. To re-enable file caching, add <codeph
        >-Dsun.io.useCanonCaches=true </codeph> to the Java
            invocation command in the <filepath>dita.bat</filepath> and <filepath>ant.bat</filepath> wrapper
            scripts.</p>
         <note>As of DITA-OT 3.7.3, this system property is set by default in the bundled wrapper scripts.</note>
      </section>
   </body>

   <related-links>
      <linklist>
         <title>Collected links</title>
         <link href="http://en.wikipedia.org/wiki/Solid-state_drive" format="html" scope="external">
            <linktext>SSD</linktext>
         </link>
         <link href="http://en.wikipedia.org/wiki/RAM_drive" format="html" scope="external">
            <linktext>RAM disk</linktext>
         </link>
      </linklist>
   </related-links>
</topic>
